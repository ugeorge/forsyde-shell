{
  "name": "Forsyde-shell",
  "tagline": "A shell environment for all ForSyDe tools",
  "body": "# ForSyDe Shell\r\n\r\nThe current project provides a set of scripts to set up the ForSyDe ecosystem for the demonstrator applications and create a shell environment with the necessary commands.\r\n\r\n### Dependencies\r\n\r\nFor the ForSyDe-SystemC projects you need to install [SystemC](http://www.accellera.org/downloads/standards/systemc) manually on your workstation. \r\n\r\n### Installation\r\n\r\nCurrently the installation script works only on Debian distributions of Linux. On other OS, for the time being you can study `setup.sh` to install manually all dependencies.\r\n\r\nTo install all dependencies and create the shell simply run from the current folder:\r\n\r\n    ./setup.sh\r\n\r\nand follow the instructions.\r\n\r\nIn case you need to update your installation options you can run `setup.sh` again and it will just update the shell, without modifying the existing options.\r\n\r\nIf you want to perform the installation in non-interactive mode, you can run `setup.sh` with the following parameters:\r\n\r\nIf you need to reset the shell (without reinstalling the tools) type\r\n\r\n    ./setup.sh --no-dialog             # non-interactive. Updates shell if one exists already\r\n    ./setup.sh --no-dialog --reset     # non-interactive. Resets shell if one exists already\r\n    ./setup.sh --no-dialog --uninstall # non-interactive. Uninstalls everything.\r\n\r\nIn non-interactive mode the installation configuration must be set in `shell/default.conf`\r\n\r\n### Running the shell\r\n\r\nOpen the newly created shell by running\r\n\r\n    ./forsyde-shell\r\n    \r\nwhich starts in the working directory `models`. The welcome screen contains enough information for getting started. All in-built commands come with usage manuals which can be printed by calling `help-<command>` inside the shell.\r\n\r\n**OBS**: we recommend studying the available commands by typing `list-commands` before starting to use the shell.\r\n\r\n\r\n### Development inside the shell\r\n\r\nAfter setting up the ForSyDe-Shell a lot of help information is displayed accordingly, either in the welcome screen or by calling the `list-commands` or `help-<command>` functions. But there are a few more tricks that a developer has to know in order to use or extend the shell.\r\n\r\n#### Directory structure\r\n\r\nA fully set up shell has the following structure:\r\n  * `setup.sh` is the setup script. It takes care of acquiring and putting everything to its place.\r\n  * `forsyde-shell` is the generated executable that opens a new shell window\r\n  * `shell/` contains everything needed for this to run and comes with the repository. Here reside mainly bash scripts (e.g. defining shell functions), makefile definitions, file templates and configuration files.\r\n  * `libs/` In case one has chosen to, libraries such as ForSyDe-SystemC, ForSyDe-Shallow or SDF3 will be installed here.\r\n  * `tools/` As well, here are placed tools in form of binaries or source code. For non-binary distributions the setup should take care of installing dependent libraries, parsers, compilers or execution environments.\r\n  * `workspace/` here is the workspace for ForSyDe projects. Usually forsyde-shell starts from here as `pwd`.\r\n\r\n#### ForSyDe-SystemC project structure\r\n\r\nA project may be anywhere accessible on the file system, although it is recommended to be somewhere under `workspace`. In order to minimize the overhead of setting or passing parameters around or dealing with complex scripts, ForSyDe-Shell operates on the following conventional structure:\r\n * `application-name/` : important since it will appear in several places\r\n     - `.project` : dummy file that tells the shell that this is a project\r\n     - `Makefile` : created with `generate-makefile` and then modified accordingly \r\n     - `src/` : here are the source files. All `.c` and `.cpp` files need to be here (no subfolders allowed)-\r\n     - `files/` : miscellaneous files, such as inputs or configurations.\r\n     - `ir/` : is where the ForSyDe-IR model is expected to be found by default by most of the tools. This means that you must make sure that ForSyDe introspection dumps XML files there.\r\n     - other generated folders, depending on the tools ran. \r\n\r\n#### Environment variables:\r\n\r\nIn order to know what environment variables are available and their values, one can check the generated shell source script in `shell/forsyde-shell.sh`\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}